The code for chapters four through part of 12
1) def square(t):
...     for i in range(4):
...         fd(t, 100)
...         lt(t)
... 
>>> square(t)


2) def square(t, length):
...     for i in range(4):
...         fd(t, length)
...         lt(t)
... 
>>> bill = Turtle()
>>> square(bill, 90)

3) def polygon(t, length,n):
...     for i in range(n):
...         fd(t, length)
...         lt(t, 360.0/n)
... 
>>> polygon(bill, 100, 6)

4) def circle(t,r):
...     circ = 2*3.14159*r
...     n = 100
...     length = circ/n
...     polygon(t, length, n)
>>> circle(bob, 50)

4.5) >>> def circle(t,r):
...     circ = 2*3.14159*r
...     n = int(circ/4)
...     length = circ/n
...     polygon(t, length, n)
... 
>>> circle(bob, 75)

5) def polygon2(t, length, n, angle):
...     for i in range (n):
...         fd(t, length)
...         lt(t, angle)
... 
>>> def polygon(t, length, n):
...     angle = 360.0/n
...     polygon2(t, length, n, angle)
... 
>>> def arc(t, r, angle):
...     arclength = 2*3.14159*4*(angle/360.0)
...     n = int(arclength/4)
...     length = arclength/n
...     angle = float(angle)/n
...     polygon2(t, length, n, angle)
... 


>>> def arc(t, r, angle):
...     arclength = 2*3.14159*r*(angle/360.0)
...     n = int(arclength/4)
...     length2 = arclength/n
...     angle2 = float(angle)/n
...     polygon2(t, length2, n, angle2)
... 
>>> def circle(t, r):
...     arc(t, r, 360)
... 
>>> circle(bob, 100)
>>> 


5.2
def is_triangle(a,b,c):
...     if a>(b+c):
...         print 'No'
...     if b>(a+c):
...         print 'No'
...     if c>(a+b):
...         print 'No'
...     else:
...         print 'Yes'
... 
>>> is_triangle(1,1,1)
Yes

>>> def user_inputs(a,b,c):
...     prompt = 'Input the length of one side of the triangle'
...     length = raw_input(prompt)
...     a = int(length)
...     prompt2 = 'Input the length of another side of the triangle'
...     length2 = raw_input(prompt)
...     b = int(length2)
...     prompt3 = 'Input the length of the last side'
...     length3 = raw_input(prompt3)
...     c = int(length3)
...     is_triangle(a,b,c)
... 
>>> user_inputs(1,1,1)
Input the length of one side of the triangle1
Input the length of one side of the triangle1
Input the length of the last side1
Yes

5.3
>>> def draw(t, length, n):
...     if n == 0:
...         return
...     angle = 50
...     fd(t, length*n)
...     lt(t, angle)
...     draw(t, length,n-1) 
...     rt(t, 2*angle)
...     draw(t, length, n-1)
...     lt(t, angle)
...     bk(t, length*n)
... 
>>> draw(t,40,3)

5.4
>>> world = TurtleWorld()
>>> bon = Turtle()
>>> bon.delay = 0.1
>>> def koch(t,n):
...     if n < 3:
...         fd(t,n)
...         return
...     p = n/3.0
...     koch(t,p)
...     lt(t,60)
...     koch(t,p)
...     rt(t,120)
...     koch(t,p)
...     lt(t,60)
...     koch(t,p)
... 
>>> koch(bon,50)
>>> koch(bon,200)
>>> 

>>> def snowflake(t,n):
...     for i in range(3):
...         koch(t,n)
...         rt(t,120)
... 
>>> snowflake(bon, 200)
>>> 
6.1
>>> def compare(x,y):
...     if x > y:
...         return 1
...     if x == y:
...         return 0
...     if x < y:
...         return -1
... 
>>> compare(1,1)
0
>>> compare(1,2)
-1
>>> compare(10,2)
1

6.2
>>> def hypotenuse(a,b):
...     return 0.0
... 
>>> hypotenuse
<function hypotenuse at 0x2ce270>
>>> hypotenuse(1,1)
0.0
>>> def hypotenuse(a,b):
...     a2 = a**2
...     b2 = b**2
...     print 'a squared is', a2
...     print 'b squared is', b2
...     return 0.0
... 
>>> hypotenuse(2,2)
a squared is 4
b squared is 4
0.0
>>> import math
>>> def hypotenuse(a,b):
...     a2 = a**2
...     b2 = b**2
...     c2 =a2 + b2
...     result = math.sqrt(c2)
...     return result
... 
>>> hypotenuse(3,4)
5.0
>>> COULDN'T DO 6.5,6.6

6.6

>>> def first(word):
...     return word[0]
... 
>>> first(word)
'b'
>>> def last(word):
...     return word[-1]
... 
>>> last(word)
'a'
>>> def middle(word):
...     return word[1:-1]
... 
>>> middle(word)
'anan'
>>> joe = 'ed'
>>> middle(joe)
''
>>> joe = 'j'
>>> middle(joe)
''
>>> joe = ' '
>>> middle(joe)
''

7.1
>>> def print_n(s,n):
...     while n > 0:
...         print s
...         n = n-1
... 
>>> print_n(1,3)
1
1
1

7.2
>>> def square_root(a):
...     x = a/2
...     while True:
...         print x
...         y = (x+a/x)/2
...         if abs(y-x) < 0.0000001:
...             break
...         x = y
... 
>>> square_root(4)
2

7.4
>>> def eval_loop():
...     while True:
...         name = raw_input('Input string to be evaluated ')
...         t = eval('name')
...         eval(t)
...         print eval(t)
...         line = raw_input('> ')
...         if line == 'done':
...             break
...         print line
...     print 'Done!'
... 
>>> eval_loop()
Input string to be evaluated 1 + 2 * 3
7
> 

Input string to be evaluated 5 + 5
10
> done
Done!

8.2

prefixes = 'JKLMNOPQ' suffix = 'ack'

>>> you = 'u'
>>> for letter in prefixes:
...     if letter != prefixes[5] and letter != prefixes[7]:
...         print letter + suffix
...     if letter == prefixes[5]:
...         print letter + you + suffix
...     if letter == prefixes [7]:
...         print letter + you + suffix
... 
Jack
Kack
Lack
Mack
Nack
Ouack
Pack
Quack

8.4
>>> def find(word, letter, index):
...     while index < len(word):
...         if word[index] == letter:
...             return index
...         index = index + 1
...     return -1

8.5
>>> def count(word, a):
...     count = 0
...     for letter in word:
...         if letter == a:
...             count = count + 1
...     print count
... 
>>> word = 'banana'
>>> a = 'a'
>>> count(word,a)
3

8.6
>>> def count_find(word,a):
...     count = 0
...     index = 0
...     while index < len(word):
...         if word[index] == a:
...             count = count + 1
...         index = index + 1
...     print count
... 
>>> count_find(word,a)
3

10.1
>>> def cumulative_sum(t):
...     res = [0]*len(t)
...     i = 0
...     while i <= len(t)-1:
...         if i == 0:
...             res[0] = t[0]
...             i += 1
...         else:
...             res[i] = res[i-1] + t[i]
...             i += 1
...     return res
... 
>>> cumulative_sum([1, 2, 3])
[1, 3, 6]

10.2
>>> def chop(t):
...     result = t[1:len(t)-1]
...     print result
... 
>>> chop(['a', 'b', 'c'])
['b']

10.3
>>> def is_sorted(t):
...     orig = t[:]
...     t.sort()
...     if t == orig:
...         print True
...     else:
...         print False
... 
>>> is_sorted([1,2,3])
True
>>> is_sorted([1,3,2])
False

10.4

>>> def is_anagram(u,v):
...     t = list(u)
...     t.sort()
...     r = list(v)
...     r.sort()
...     if t == r:
...         print True
...     else:
...         print False
False
>>> is_anagram('rat', 'tar')
True
>>> is_anagram('rat', 'tic')
False

11.2

>>> def histogram(s):
...     d = dict()
...     for c in s:
...         d[c] = 1 + d.get(c,0)
...     return d
... 
>>> h = histogram('brontosaurus')
>>> print h
{'a': 1, 'b': 1, 'o': 2, 'n': 1, 's': 2, 'r': 2, 'u': 2, 't': 1}

11.3

>>> def print_hist(h):
...     t = list(h)
...     t.sort()
...     for c in t:
...         print c, h[c]
... 
>>> h = histogram('kate')
>>> print_hist(h)
a 1
e 1
k 1
t 1

11.4

>>> def reverse_lookup(d,v):
...     t = list()
...     for c in d:
...         if d[c] == v:
...             t.append(c)
...     return t
... 
>>> h = histogram('kate')
>>> k = reverse_lookup(h,1)
>>> print k
['a', 'k', 'e', 't']
>>> k = reverse_lookup(h,2)
>>> print k
[]

12.1
>>> def sumall(*args):
...     t = list(args)
...     return sum(t)
... 
>>> t = (1,2,3)
>>> sumall(*t)
6

12.2

